import asyncio
import json
import os
import pathlib
from typing import Dict, Any
from playwright.async_api import async_playwright
from playwright_bot.config import SETTINGS
from playwright_bot.state_store import StateStore
from playwright_bot.thumbtack_bot import ThumbTackBot


async def run_single_pass() -> Dict[str, Any]:
    store = StateStore(
        path=getattr(SETTINGS, "state_path", ".tt_state.json"),
        cooldown_hours=getattr(SETTINGS, "cooldown_hours", 0)
    )
    async with async_playwright() as pw:

        context = await pw.chromium.launch_persistent_context(
            user_data_dir=SETTINGS.user_data_dir,
            headless=False,  # GUI —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
            slow_mo=0,  # –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
            args=[
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--disable-features=VizDisplayCompositor",
                "--disable-blink-features=AutomationControlled",
                "--disable-extensions",
                "--disable-plugins",
                "--remote-debugging-port=9222",
            ],
            viewport=None,
        )

        page = await context.new_page()

        cycle_count = 0
        while True:
            try:
                cycle_count += 1

                bot = ThumbTackBot(page)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await bot.login_if_needed()
                
                await bot.open_leads()
                print("AFTER GOTO:", page.url)
                leads = await bot.list_new_leads()
                print(f"[DEBUG] found leads: {len(leads)}")

                if not leads:
                    print("–õ–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
                    await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 0.1 —Å–µ–∫—É–Ω–¥—ã
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–¥—ã
                sent = []
                for lead in leads:
                    try:
                        await bot.open_lead_details(lead)
                        lead_key = lead["lead_key"]
                        variables = {
                            "lead_id": lead_key,
                            "lead_url": f"{SETTINGS.base_url}{lead['href']}",
                            "name": lead.get("name") or "",
                            "category": lead.get("category") or "",
                            "location": lead.get("location") or "",
                            "source": "thumbtack",
                        }
                        
                        await bot.send_template_message(dry_run=True)
                        sent.append({
                            "index": lead["index"],
                            "status": "sent",
                            "lead_key": lead_key,
                            "variables": variables,
                        })
                    except Exception as e:
                        sent.append({"index": lead["index"], "status": f"error: {e}"})
                    finally:
                        await bot.open_leads()

                # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
                phones = await bot.extract_phones_from_all_threads()
                print(f"üìû –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {phones}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                if phones:
                    return {
                        "ok": True,
                        "phones": phones,
                        "sent": []
                    }
                
                # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                print("–¢–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
            except KeyboardInterrupt:
                print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{cycle_count}: {e}")
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ KeyboardInterrupt
        return {
            "ok": True,
            "message": "Persistent browser stopped",
            "phones": [],  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∞—Å–∫–æ–π
            "sent": []
        }