import json
import os
import pathlib
from typing import Dict, Any
from playwright.async_api import async_playwright
from playwright_bot.config import SETTINGS
from playwright_bot.state_store import StateStore
from playwright_bot.thumbtack_bot import ThumbTackBot


async def run_continuous_loop():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤ —Å persistent context
    –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –∏ –∫—Ä—É—Ç–∏—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ!
    """
    import time
    
    store = StateStore(
        path=getattr(SETTINGS, "state_path", ".tt_state.json"),
        cooldown_hours=getattr(SETTINGS, "cooldown_hours", 0)
    )
    
    from playwright.async_api import async_playwright
    
    async with async_playwright() as p:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º launch_persistent_context –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        # –î–æ–±–∞–≤–ª—è–µ–º debug –ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ chrome://inspect
        debug_args = [
            "--remote-debugging-port=9222",
            "--remote-debugging-address=127.0.0.1",
            "--no-sandbox",
            "--disable-setuid-sandbox",
            "--disable-dev-shm-usage",
            "--disable-gpu",
            "--disable-blink-features=AutomationControlled",
            "--disable-web-security",
            "--disable-features=VizDisplayCompositor",
            "--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        
        context = await p.chromium.launch_persistent_context(
            user_data_dir=SETTINGS.user_data_dir,
            headless=False,
            slow_mo=SETTINGS.slow_mo,
            args=debug_args,
            viewport=None,
        )
        
        print("üöÄ –ó–∞–ø—É—â–µ–Ω persistent context - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!")
        print("üîç Debug –ø–æ—Ä—Ç: http://localhost:9222")
        print("üåê Chrome inspect: chrome://inspect")
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
        page = await context.new_page()
        
        cycle_count = 0
        
        # –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –¶–ò–ö–õ - –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è!
        while True:
            try:
                cycle_count += 1
                print(f"\nüîÑ === –¶–ò–ö–õ #{cycle_count} ===")
                
                # IP check (debug) - —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º —Ü–∏–∫–ª–µ
                if cycle_count == 1:
                    ip_page = await context.new_page()
                    await ip_page.goto("https://api.ipify.org?format=text", wait_until="domcontentloaded", timeout=20000)
                    ip_txt = await ip_page.text_content("body") or ""
                    await ip_page.close()
                    print(f"üåê IP –∞–¥—Ä–µ—Å: {ip_txt}")
                    print("PROFILE USED:", SETTINGS.user_data_dir, "exists:", os.path.isdir(SETTINGS.user_data_dir))

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Thumbtack
                await page.goto("https://www.thumbtack.com/pro-inbox/", wait_until="domcontentloaded")
                print("AFTER GOTO:", page.url)

                bot = ThumbTackBot(page)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –¥–ª—è async –º–µ—Ç–æ–¥–æ–≤
                import asyncio
                
                await bot.open_leads()

                leads = await bot.list_new_leads()
                print(f"[DEBUG] found leads: {len(leads)}")

                if not leads:
                    print("‚ÑπÔ∏è –õ–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª...")
                    await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –µ—Å–ª–∏ –ª–∏–¥–æ–≤ –Ω–µ—Ç
                    continue

                sent = []
                for lead in leads:
                    try:
                        await bot.open_lead_details(lead)
                        lead_key = lead["lead_key"]
                        variables = {
                            "lead_id": lead_key,
                            "lead_url": f"{SETTINGS.base_url}{lead['href']}",
                            "name": lead.get("name") or "",
                            "category": lead.get("category") or "",
                            "location": lead.get("location") or "",
                            "source": "thumbtack",
                        }
                        
                        await bot.send_template_message(dry_run=True)
                        sent.append({
                            "index": lead["index"],
                            "status": "sent",
                            "lead_key": lead_key,
                            "variables": variables,
                        })
                    except Exception as e:
                        sent.append({"index": lead["index"], "status": f"error: {e}"})
                    finally:
                        await bot.open_leads()

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
                phones = await bot.extract_phones_from_all_threads()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ Celery –¥–ª—è AI calls
                ai_calls_enqueued = []
                for phone_data in phones:
                    try:
                        from ai_calls.tasks import enqueue_ai_call
                        
                        # –°–æ–∑–¥–∞–µ–º FoundPhone –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Celery
                        from leads.models import FoundPhone
                        phone_obj, created = await asyncio.to_thread(
                            FoundPhone.objects.get_or_create,
                            lead_key=phone_data["lead_key"],
                            phone=phone_data["phone"],
                            defaults={"variables": phone_data["variables"]}
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –≤ Celery
                        task = enqueue_ai_call.delay(str(phone_obj.id))
                        ai_calls_enqueued.append({
                            "phone": phone_data.get("phone", ""),
                            "task_id": task.id,
                            "status": "enqueued",
                            "phone_obj_id": phone_obj.id
                        })
                        print(f"üìû AI call enqueued for phone: {phone_data.get('phone', 'unknown')} (ID: {phone_obj.id})")
                    except Exception as e:
                        print(f"‚ùå Failed to enqueue AI call: {e}")
                        ai_calls_enqueued.append({
                            "phone": phone_data.get("phone", ""),
                            "error": str(e),
                            "status": "failed"
                        })
                
                print(f"‚úÖ –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω:")
                print(f"   üìã –õ–∏–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(sent)}")
                print(f"   üìû –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(phones)}")
                print(f"   ü§ñ AI calls –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(ai_calls_enqueued)}")
                
            except KeyboardInterrupt:
                print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                break
            except Exception as e:
                print(f"üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{cycle_count}: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (5 –º–∏–Ω—É—Ç)
            print("‚è≥ –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
            await asyncio.sleep(300)