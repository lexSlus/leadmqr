# üöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø UBUNTU –°–ï–†–í–ï–†–ê - LeadMQR

# ========================================
# 1. –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
# ========================================

export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1
docker compose -f docker-compose-dev.yaml up --build -d
docker compose -f docker-compose-dev.yaml ps

# ========================================
# 2. –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –õ–ò–î–ê
# ========================================

docker compose -f docker-compose-dev.yaml exec web python manage.py shell -c "
from leads.tasks import process_single_lead_task

test_lead = {
    'index': 0,
    'href': '/pro-inbox/messages/552361562202349575',
    'lead_key': '040fce53dd765b65513b5e5c118a02e5',
    'name': 'Real Lead with Phone',
    'category': 'Real Category',
    'location': 'Real Location',
    'has_view': True
}

print('=== –û–¢–ü–†–ê–í–õ–Ø–ï–ú –õ–ò–î –° –¢–ï–õ–ï–§–û–ù–û–ú ===')
result = process_single_lead_task.apply_async(args=[test_lead], queue='lead_proc')
print(f'Task ID: {result.id}')
print('‚úÖ –õ–∏–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
"

# ========================================
# 3. –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–û–ì–û–í
# ========================================

# –õ–æ–≥–∏ –≤–æ—Ä–∫–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤
docker compose -f docker-compose-dev.yaml logs -f celery_worker

# –õ–æ–≥–∏ AI –≤–æ—Ä–∫–µ—Ä–∞
docker compose -f docker-compose-dev.yaml logs -f celery_worker_ai

# –õ–æ–≥–∏ LeadProducer
docker compose -f docker-compose-dev.yaml logs -f lead_producer

# ========================================
# 4. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
# ========================================

docker compose -f docker-compose-dev.yaml exec web python manage.py shell -c "
from leads.models import FoundPhone, ProcessedLead
from ai_calls.models import AICall

print('=== FoundPhone ===')
for phone in FoundPhone.objects.all().order_by('-created_at')[:3]:
    print(f'Lead: {phone.lead_key}, Phone: {phone.phone}, Created: {phone.created_at}')

print('\n=== ProcessedLead ===')
for lead in ProcessedLead.objects.all().order_by('-created_at')[:3]:
    print(f'Lead: {lead.key}, Created: {lead.created_at}')

print('\n=== AICall ===')
for call in AICall.objects.all().order_by('-created_at')[:3]:
    print(f'Lead: {call.lead_key}, Phone: {call.to_phone}, Status: {call.status}, Created: {call.created_at}')
"

# ========================================
# 5. –û–ß–ò–°–¢–ö–ê –î–õ–Ø –ü–û–í–¢–û–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ========================================

docker compose -f docker-compose-dev.yaml exec web python manage.py shell -c "
from leads.models import FoundPhone, ProcessedLead
from ai_calls.models import AICall

FoundPhone.objects.all().delete()
ProcessedLead.objects.all().delete()
AICall.objects.all().delete()
print('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
"

# ========================================
# 6. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –¢–ï–°–¢ –° –ù–û–í–´–ú –õ–ò–î–û–ú
# ========================================

docker compose -f docker-compose-dev.yaml exec web python manage.py shell -c "
from leads.tasks import process_single_lead_task

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
test_lead_new = {
    'index': 0,
    'href': '/pro-leads/NEW_LEAD_ID',
    'lead_key': 'NEW_LEAD_KEY',
    'name': 'New Test Lead',
    'category': 'Test Category',
    'location': 'Test Location',
    'has_view': True
}

result = process_single_lead_task.apply_async(args=[test_lead_new], queue='lead_proc')
print(f'Task ID: {result.id}')
"

# ========================================
# 7. –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´
# ========================================

docker compose -f docker-compose-dev.yaml down

# ========================================
# 8. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
# ========================================

docker compose -f docker-compose-dev.yaml ps
docker compose -f docker-compose-dev.yaml logs --tail=20 celery_worker
docker compose -f docker-compose-dev.yaml logs --tail=20 celery_worker_ai
