import logging
from typing import Dict, Any, Optional
from datetime import datetime
from .client import TelegramBotClient
from django.conf import settings

logger = logging.getLogger('playwright_bot')


class TelegramService:
    def __init__(self):
        # –ù–µ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ chat_id –±—É–¥–µ—Ç —Ä–∞–∑–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        pass

    def prepare_lead_data(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞ –æ—Ç LeadRunner
            
        Returns:
            Dict —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        variables = result.get("variables", {})
        return {
            "name": variables.get("name", "Unknown"),
            "category": variables.get("category", "Unknown"),
            "location": variables.get("location", "Unknown"),
            "phone": result.get("phone", "Unknown"),
            "lead_url": variables.get("lead_url", ""),
            "lead_key": result.get("lead_key", "Unknown")
        }

    def format_lead_message(self, lead_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–¥–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            lead_data: –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        name = lead_data.get('name', 'Unknown')
        category = lead_data.get('category', 'Unknown')
        location = lead_data.get('location', 'Unknown')
        phone = lead_data.get('phone', 'Unknown')
        lead_url = lead_data.get('lead_url', '')
        lead_key = lead_data.get('lead_key', 'Unknown')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –∏ HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
        message = f"""
üö® <b>New Lead Ready for Call!</b>

üë§ <b>Client:</b> {name}
üè† <b>Category:</b> {category}
üìç <b>Location:</b> {location}
üìû <b>PHONE:</b> <code>{phone}</code>
üîó <b>Link:</b> <a href="{lead_url}">Open Lead</a>

‚è∞ <b>Time:</b> {self._get_current_time()}
üÜî <b>Lead ID:</b> {lead_key}
"""
        
        return message.strip()

    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (Miami timezone)"""
        import pytz
        miami_tz = pytz.timezone('America/New_York')  # Miami uses Eastern Time
        miami_time = datetime.now(miami_tz)
        return miami_time.strftime("%Y-%m-%d %H:%M:%S EST")

    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        return settings.TELEGRAM_ENABLED

    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
        return bool(settings.TELEGRAM_BOT_TOKEN and self.has_subscribers())
    
    def has_subscribers(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            from .models import TelegramSubscriber
            return TelegramSubscriber.objects.exists()
        except Exception:
            return False

    def send_lead_notification(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ –≤ Telegram.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞ –æ—Ç LeadRunner
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
                - success: bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
                - lead_key: str - –∫–ª—é—á –ª–∏–¥–∞
                - error: str - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        lead_data = self.prepare_lead_data(result)
        lead_key = lead_data.get("lead_key", "unknown")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not self.is_enabled():
            return {
                "success": False,
                "lead_key": lead_key,
                "error": "Telegram notifications disabled"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.is_configured():
            return {
                "success": False,
                "lead_key": lead_key,
                "error": "Telegram not configured"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        try:
            from .models import TelegramSubscriber
            
            message = self.format_lead_message(lead_data)
            subscribers = TelegramSubscriber.objects.all()
            
            if not subscribers.exists():
                return {
                    "success": False,
                    "lead_key": lead_key,
                    "error": "No subscribers found"
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            success_count = 0
            total_count = subscribers.count()
            
            for subscriber in subscribers:
                try:

                    client = TelegramBotClient()
                    client.chat_id = str(subscriber.chat_id)
                    
                    success = client.send_lead_notification(message)
                    if success:
                        success_count += 1
                    
                except Exception as e:
                    logger.error(f"Failed to send notification to subscriber {subscriber.chat_id}: {e}")
            
            if success_count > 0:
                return {
                    "success": True,
                    "lead_key": lead_key,
                    "error": None,
                    "sent_to": f"{success_count}/{total_count} subscribers"
                }
            else:
                return {
                    "success": False,
                    "lead_key": lead_key,
                    "error": "Failed to send to any subscribers"
                }
                
        except Exception as e:
            return {
                "success": False,
                "lead_key": lead_key,
                "error": str(e)
            }
