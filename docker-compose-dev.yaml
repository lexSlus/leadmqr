version: '3.9'

services:
  db:
    image: postgres:16-alpine
    container_name: leadmqr_db
    restart: unless-stopped
    env_file: [.env]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks: [leadmqr_net]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 12

  redis:
    image: redis:7-alpine
    container_name: leadmqr_redis
    restart: unless-stopped
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    networks: [leadmqr_net]
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: leadmqr_rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - "5672:5672"     # брокер для celery
      - "15672:15672"   # RabbitMQ UI
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [leadmqr_net]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  web:
    build:
      context: .
      dockerfile: Dockerfile.base
    container_name: leadmqr_web
    restart: unless-stopped
    volumes:
      - .:/app
    env_file: [.env]
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    ports: ["8000:8000"]
    networks: [leadmqr_net]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: >
      python manage.py runserver 0.0.0.0:8000

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.base
    container_name: leadmqr_celery_beat
    restart: unless-stopped
    volumes:
      - .:/app
    env_file: [.env]
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [leadmqr_net]
    command: >
      celery -A leadmqr beat -l info

  # ========================================
  # ГИБРИДНАЯ АРХИТЕКТУРА
  # ========================================
  # celery_lead_producer запускается ЛОКАЛЬНО на Mac:
  # python start_local_producer.py
  # 
  # Это позволяет:
  # - Отладка через chrome://inspect
  # - Persistent context для максимальной скорости
  # - Гибридная архитектура: Docker + локальный Playwright

  # ========================================
  # ЗАКОММЕНТИРОВАНО: НЕ НУЖЕН В НОВОЙ АРХИТЕКТУРЕ
  # ========================================
  # celery_worker больше не нужен, так как обработка лидов
  # теперь происходит локально в run_continuous_loop()
  
  # celery_worker:
  #   build:
  #     context: .
  #     dockerfile: docker/celery/Dockerfile.celery_worker
  #   container_name: leadmqr_celery_worker
  #   restart: unless-stopped
  #   env_file: [.env]
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     db:
  #       condition: service_healthy
  #   networks: [leadmqr_net]
  #   volumes:
  #     - .:/app
  #     - state_data:/app/.data
  #     - ./pw_profiles:/app/pw_profiles:rw
  #     - ./debug:/app/debug
  #   command: ["celery","-A","leadmqr","worker","-Q","lead_proc","-l","INFO","-c","2","-n","lead_proc@%h"]


  # ========================================
  # AI CALLS WORKER - ОБРАБАТЫВАЕТ ТОЛЬКО AI ЗВОНКИ
  # ========================================
  celery_worker_ai:
    build:
      context: .
      dockerfile: docker/celery/Dockerfile.celery_worker
    container_name: leadmqr_ai_worker
    restart: unless-stopped
    env_file: [.env]
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks: [leadmqr_net]
    volumes:
      - .:/app
      - state_data:/app/.data
      - ./debug:/app/debug
    entrypoint: []
    command: ["celery","-A","leadmqr","worker","-Q","ai_calls","-l","INFO","-c","4","-n","ai_calls@%h"]

networks:
  leadmqr_net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  state_data:
  playwright_cache:
  playwright_profile:

