from django.core.management.base import BaseCommand
from leads.models import FoundPhone, ProcessedLead
from ai_calls.models import AICall
from django.utils import timezone
from datetime import timedelta


class Command(BaseCommand):
    help = 'Check results of simulation and system status'

    def add_arguments(self, parser):
        parser.add_argument(
            '--recent',
            action='store_true',
            help='Show only recent results (last hour)'
        )

    def handle(self, *args, **options):
        recent_only = options['recent']
        
        if recent_only:
            cutoff_time = timezone.now() - timedelta(hours=1)
            self.stdout.write("üìä Recent Results (last hour):")
        else:
            cutoff_time = None
            self.stdout.write("üìä All Results:")

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.show_general_stats(cutoff_time)
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥–µ–ª—è–º
        self.show_processed_leads(cutoff_time)
        self.show_found_phones(cutoff_time)
        self.show_ai_calls(cutoff_time)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        self.show_system_status()

    def show_general_stats(self, cutoff_time):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        
        query_kwargs = {}
        if cutoff_time:
            query_kwargs['created_at__gte'] = cutoff_time
        
        processed_count = ProcessedLead.objects.filter(**query_kwargs).count()
        phone_count = FoundPhone.objects.filter(**query_kwargs).count()
        call_count = AICall.objects.filter(**query_kwargs).count()
        
        self.stdout.write("\n" + "="*50)
        self.stdout.write("üìà STATISTICS")
        self.stdout.write("="*50)
        self.stdout.write(f"ProcessedLeads: {processed_count}")
        self.stdout.write(f"FoundPhones: {phone_count}")
        self.stdout.write(f"AICalls: {call_count}")

    def show_processed_leads(self, cutoff_time):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ ProcessedLead"""
        
        query_kwargs = {}
        if cutoff_time:
            query_kwargs['created_at__gte'] = cutoff_time
            
        leads = ProcessedLead.objects.filter(**query_kwargs).order_by('-created_at')[:10]
        
        if leads.exists():
            self.stdout.write(f"\nüìã ProcessedLeads ({leads.count()}):")
            for lead in leads:
                self.stdout.write(f"   Key: {lead.key}")
                self.stdout.write(f"   Created: {lead.created_at}")
        else:
            self.stdout.write(f"\nüìã ProcessedLeads: No data")

    def show_found_phones(self, cutoff_time):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ FoundPhone"""
        
        query_kwargs = {}
        if cutoff_time:
            query_kwargs['created_at__gte'] = cutoff_time
            
        phones = FoundPhone.objects.filter(**query_kwargs).order_by('-created_at')[:10]
        
        if phones.exists():
            self.stdout.write(f"\nüì± FoundPhones ({phones.count()}):")
            for phone in phones:
                self.stdout.write(f"   Lead: {phone.lead_key}")
                self.stdout.write(f"   Phone: {phone.phone}")
                self.stdout.write(f"   Variables: {phone.variables}")
                self.stdout.write(f"   Created: {phone.created_at}")
                self.stdout.write("   ---")
        else:
            self.stdout.write(f"\nüì± FoundPhones: No data")

    def show_ai_calls(self, cutoff_time):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ AICall"""
        
        query_kwargs = {}
        if cutoff_time:
            query_kwargs['created_at__gte'] = cutoff_time
            
        calls = AICall.objects.filter(**query_kwargs).order_by('-created_at')[:10]
        
        if calls.exists():
            self.stdout.write(f"\nüìû AICalls ({calls.count()}):")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for call in calls:
                status = call.status
                status_counts[status] = status_counts.get(status, 0) + 1
            
            self.stdout.write("   Status distribution:")
            for status, count in status_counts.items():
                self.stdout.write(f"     {status}: {count}")
            
            # –î–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–æ–≤
            self.stdout.write("   Details:")
            for call in calls:
                self.stdout.write(f"     Lead: {call.lead_key}")
                self.stdout.write(f"     Phone: {call.to_phone}")
                self.stdout.write(f"     Status: {call.status}")
                self.stdout.write(f"     Created: {call.created_at}")
                if call.provider_call_id:
                    self.stdout.write(f"     Provider ID: {call.provider_call_id}")
                self.stdout.write("     ---")
        else:
            self.stdout.write(f"\nüìû AICalls: No data")

    def show_system_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        
        self.stdout.write(f"\nüîß SYSTEM STATUS")
        self.stdout.write("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        recent_calls = AICall.objects.filter(
            created_at__gte=timezone.now() - timedelta(minutes=5)
        )
        
        if recent_calls.exists():
            self.stdout.write("‚úÖ System is active - recent AI calls found")
        else:
            self.stdout.write("‚ö†Ô∏è  No recent activity")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∑–≤–æ–Ω–∫–∞—Ö
        error_calls = AICall.objects.filter(status=AICall.Status.ERROR)
        if error_calls.exists():
            self.stdout.write(f"‚ùå {error_calls.count()} failed calls found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
        success_calls = AICall.objects.filter(status=AICall.Status.FINISHED)
        if success_calls.exists():
            self.stdout.write(f"‚úÖ {success_calls.count()} successful calls")
