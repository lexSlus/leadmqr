#!/usr/bin/env python3
"""
–¢–µ—Å—Ç LeadProducer —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–∏–∫–ª–æ–≤
–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
"""

import os
import sys
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/lex/Documents/leadmqr')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'leadmqr.settings')

import django
django.setup()

from playwright_bot.lead_producer import LeadProducer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger("playwright_bot")

async def test_lead_producer(cycles=3):
    """–¢–µ—Å—Ç LeadProducer —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–∏–∫–ª–æ–≤"""
    print(f"üß™ –¢–µ—Å—Ç LeadProducer ({cycles} —Ü–∏–∫–ª–æ–≤)...")
    print("üìù –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å lead_proc")
    print("="*50)
    
    try:
        producer = LeadProducer()
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º _loop –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤
        original_loop = producer._loop
        cycle_count = 0
        
        async def limited_loop():
            nonlocal cycle_count
            while not producer.stop_evt.is_set() and cycle_count < cycles:
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    await producer._renew()
                    await producer._hb()
                    
                    await producer.bot.open_leads()
                    print(f"üîç –¶–∏–∫–ª {cycle_count + 1}: –æ—Ç–∫—Ä—ã–ª /leads")
                    
                    leads = await producer.bot.list_new_leads()
                    print(f"üìã –¶–∏–∫–ª {cycle_count + 1}: –Ω–∞–π–¥–µ–Ω–æ {len(leads)} –ª–∏–¥–æ–≤")
                    
                    cycle_count += 1
                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª {cycle_count}/{cycles}")
                    
                    # –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
                    if cycle_count < cycles:
                        print(f"‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
                        await asyncio.sleep(10)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {cycle_count + 1}: {e}")
                    cycle_count += 1
                    if cycle_count >= cycles:
                        break
                    # –ü–∞—É–∑–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    print(f"‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...")
                    await asyncio.sleep(10)
            
            if cycle_count >= cycles:
                print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ ({cycles}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è...")
                producer.stop_evt.set()
        
        producer._loop = limited_loop
        
        await producer.start()
        
        print(f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cycle_count} —Ü–∏–∫–ª–æ–≤")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç LeadProducer')
    parser.add_argument('--cycles', type=int, default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)')
    
    args = parser.parse_args()
    
    print("üß™ LeadProducer Test Runner")
    print("="*50)
    print(f"–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç LeadProducer –Ω–∞ {args.cycles} —Ü–∏–∫–ª–∞—Ö:")
    print("1. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ –ª–∏–¥—ã –Ω–∞ Thumbtack")
    print("2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å lead_proc")
    print("3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏")
    print("4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤")
    print("="*50)
    
    try:
        asyncio.run(test_lead_producer(args.cycles))
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
