#!/usr/bin/env python3
"""
–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ run_single_pass
"""

import os
import sys
import asyncio
import logging
import time
import subprocess
import signal
from playwright.async_api import async_playwright

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'leadmqr.settings')

import django
django.setup()

from playwright_bot.config import SETTINGS
from playwright_bot.thumbtack_bot import ThumbTackBot
from telegram_app.services import TelegramService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger("playwright_bot")

async def debug_phone_extraction():
    """–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –∫–∞–∫ –≤ run_single_pass, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"""
    print("üîç –î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    print("üìû –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥—ã, —Å—Ä–∞–∑—É –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("="*50)
    
    async with async_playwright() as pw:
        # –°–ø–æ—Å–æ–± 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –±—Ä–∞—É–∑–µ—Ä—É —á–µ—Ä–µ–∑ remote debugging
        try:
            print("üîó –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –±—Ä–∞—É–∑–µ—Ä—É...")
            browser = await pw.chromium.connect_over_cdp("http://localhost:9222")
            context = browser.contexts[0] if browser.contexts else await browser.new_context()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –±—Ä–∞—É–∑–µ—Ä—É!")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –±—Ä–∞—É–∑–µ—Ä—É: {e}")
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä...")
            context = await pw.chromium.launch_persistent_context(
                user_data_dir="./pw_profiles",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π setup_auth
                headless=False,  # –ù–ï headless –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
                slow_mo=0,  # –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                args=[
                    "--no-sandbox",
                    "--disable-dev-shm-usage",
                    "--disable-gpu",
                    "--disable-features=VizDisplayCompositor",
                    "--disable-blink-features=AutomationControlled",
                    "--disable-extensions",
                    "--disable-plugins",
                    "--remote-debugging-port=9222",
                    "--lang=en-US",
                    "--accept-lang=en-US,en;q=0.9",
                    "--disable-web-security",
                    "--disable-features=VizDisplayCompositor,TranslateUI",
                ],
                viewport=None,  # –ö–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            )
            
            print("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω —Å PID:", chrome_process.pid)
            time.sleep(3)
            return True
            
        except FileNotFoundError:
            print("‚ùå –ù–∏ Chrome, –Ω–∏ Chromium –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False

def stop_chrome():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Chrome"""
    global chrome_process
    
    if chrome_process:
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Chrome...")
        try:
            if os.name != 'nt':
                os.killpg(os.getpgid(chrome_process.pid), signal.SIGTERM)
            else:
                chrome_process.terminate()
            chrome_process.wait(timeout=5)
            print("‚úÖ Chrome –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º Chrome...")
            chrome_process.kill()
        chrome_process = None

async def debug_phone_extraction():
    """–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –∫–∞–∫ –≤ run_single_pass, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"""
    print("üîç –î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    print("üìû –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥—ã, —Å—Ä–∞–∑—É –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("="*50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å debug –ø–æ—Ä—Ç–æ–º
    if not start_chrome_with_debug():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
        return
    
    print("üîê –¢–µ–ø–µ—Ä—å –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –≤ Thumbtack –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ...")
    print("‚è≥ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    await asyncio.sleep(30)
    
    async with async_playwright() as pw:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –±—Ä–∞—É–∑–µ—Ä—É —á–µ—Ä–µ–∑ remote debugging
        try:
            print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chrome —á–µ—Ä–µ–∑ remote debugging...")
            browser = await pw.chromium.connect_over_cdp("http://localhost:9222")
            context = browser.contexts[0] if browser.contexts else await browser.new_context()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Chrome!")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome: {e}")
            return
            
            print("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω —Å PID:", chrome_process.pid)
            time.sleep(3)
            return True
            
        except FileNotFoundError:
            print("‚ùå –ù–∏ Chrome, –Ω–∏ Chromium –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False

def stop_chrome():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Chrome"""
    global chrome_process
    
    if chrome_process:
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Chrome...")
        try:
            if os.name != 'nt':
                os.killpg(os.getpgid(chrome_process.pid), signal.SIGTERM)
            else:
                chrome_process.terminate()
            chrome_process.wait(timeout=5)
            print("‚úÖ Chrome –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º Chrome...")
            chrome_process.kill()
        chrome_process = None

async def debug_phone_extraction():
    """–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –∫–∞–∫ –≤ run_single_pass, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"""
    print("üîç –î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    print("üìû –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥—ã, —Å—Ä–∞–∑—É –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("="*50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å debug –ø–æ—Ä—Ç–æ–º
    if not start_chrome_with_debug():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
        return
    
    print("üîê –¢–µ–ø–µ—Ä—å –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –≤ Thumbtack –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ...")
    print("‚è≥ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    await asyncio.sleep(30)
    
    async with async_playwright() as pw:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –±—Ä–∞—É–∑–µ—Ä—É —á–µ—Ä–µ–∑ remote debugging
        try:
            print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chrome —á–µ—Ä–µ–∑ remote debugging...")
            browser = await pw.chromium.connect_over_cdp("http://localhost:9222")
            context = browser.contexts[0] if browser.contexts else await browser.new_context()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Chrome!")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome: {e}")
            return

        page = await context.new_page()
        bot = ThumbTackBot(page)
        
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await bot.login_if_needed()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–¥–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã)
            await bot.open_messages()
            print("AFTER GOTO:", page.url)
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–∏–¥–∞
            print("üîç –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–∏–¥–∞...")
            threads = await bot._threads()  # –î–æ–±–∞–≤–ª—è–µ–º await!
            thread_count = await threads.count()
            print(f"üìß –ù–∞–π–¥–µ–Ω–æ {thread_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if thread_count > 0:
                print("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é...")
                await threads.first.click()
                await asyncio.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ª–∏–¥–∞
                print("AFTER CLICK:", page.url)
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            phone = await bot._show_and_extract_in_current_thread()
            print(f"üìû –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            phones = [{"phone": phone, "lead_key": "test_lead", "href": page.url}] if phone else []
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞–π–¥–µ–Ω
            if phone:
                print("\nüì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
                    test_result = {
                        "variables": {
                            "name": "Debug Test Client",
                            "category": "Phone Extraction Test", 
                            "location": "Debug Location",
                            "lead_url": page.url
                        },
                        "phone": phone,
                        "lead_key": "debug_test_phone"
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    telegram_service = TelegramService()
                    telegram_result = telegram_service.send_lead_notification(test_result)
                    
                    if telegram_result.get("success"):
                        print(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {telegram_result.get('sent_to', 'unknown')}")
                    else:
                        print(f"‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {telegram_result.get('error', 'unknown error')}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")
            else:
                print("üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
        
        
            return {
                "ok": True,
                "phones": phones,
                "message": "Phone extraction debug completed"
            }
            
        except KeyboardInterrupt:
            print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Chrome
            stop_chrome()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç Phone Extraction Debug")
    print("="*50)
    print("–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –∫–∞–∫ run_single_pass, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã")
    print("="*50)
    
    try:
        asyncio.run(debug_phone_extraction())
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
