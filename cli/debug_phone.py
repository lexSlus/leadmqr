#!/usr/bin/env python3
"""
–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ run_single_pass
"""

import os
import sys
import asyncio
import logging
import time
from playwright.async_api import async_playwright

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'leadmqr.settings')

import django
django.setup()

from playwright_bot.config import SETTINGS
from playwright_bot.thumbtack_bot import ThumbTackBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger("playwright_bot")

async def debug_phone_extraction():
    """–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –∫–∞–∫ –≤ run_single_pass, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"""
    print("üîç –î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    print("üìû –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥—ã, —Å—Ä–∞–∑—É –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("="*50)
    
    async with async_playwright() as pw:
        context = await pw.chromium.launch_persistent_context(
            user_data_dir="./pw_profiles",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π setup_auth
            headless=False,  # –ù–ï headless –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞
            slow_mo=0,  # –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            args=[
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--disable-features=VizDisplayCompositor",
                "--disable-blink-features=AutomationControlled",
                "--disable-extensions",
                "--disable-plugins",
                "--remote-debugging-port=9222",
                "--lang=en-US",
                "--accept-lang=en-US,en;q=0.9",
                "--disable-web-security",
                "--disable-features=VizDisplayCompositor,TranslateUI",
            ],
            viewport=None,  # –ö–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        )

        page = await context.new_page()
        bot = ThumbTackBot(page)
        
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await bot.login_if_needed()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–¥–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã)
            await bot.open_messages()
            print("AFTER GOTO:", page.url)
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–∏–¥–∞
            print("üîç –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–∏–¥–∞...")
            threads = bot._threads()
            thread_count = await threads.count()
            print(f"üìß –ù–∞–π–¥–µ–Ω–æ {thread_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if thread_count > 0:
                print("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é...")
                await threads.first.click()
                await asyncio.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ª–∏–¥–∞
                print("AFTER CLICK:", page.url)
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            phone = await bot._show_and_extract_in_current_thread()
            print(f"üìû –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            phones = [{"phone": phone, "lead_key": "test_lead", "href": page.url}] if phone else []
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _extract_phone_for_lead (–ë–´–°–¢–†–ê–Ø –í–ï–†–°–ò–Ø)
            if phones:
                print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º _extract_phone_for_lead (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)...")
                
                # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞
                class FastTestRunner:
                    def __init__(self, phones_data):
                        self.phones_data = phones_data
                    
                    async def _extract_phone_for_lead(self, lead_key: str):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                        for row in self.phones_data or []:
                            if (str(row.get("lead_key") or "") == str(lead_key)) and row.get("phone"):
                                phone = str(row["phone"]).strip()
                                print(f"PHONE FOUND for {lead_key} -> {phone}")
                                return phone
                        print(f"PHONE NOT FOUND for {lead_key} (rows checked={len(self.phones_data or [])})")
                        return None
                
                runner = FastTestRunner(phones)
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π lead_key –¥–ª—è —Ç–µ—Å—Ç–∞
                first_lead_key = phones[0].get("lead_key")
                if first_lead_key:
                    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è lead_key: {first_lead_key}")
                    found_phone = await runner._extract_phone_for_lead(first_lead_key)
                    print(f"üì± –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {found_phone}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º lead_key
                    fake_lead_key = "fake_lead_key_123"
                    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º lead_key: {fake_lead_key}")
                    not_found_phone = await runner._extract_phone_for_lead(fake_lead_key)
                    print(f"üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ: {not_found_phone}")
            
            return {
                "ok": True,
                "phones": phones,
                "message": "Phone extraction debug completed"
            }
            
        except KeyboardInterrupt:
            print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç Phone Extraction Debug")
    print("="*50)
    print("–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –∫–∞–∫ run_single_pass, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã")
    print("="*50)
    
    try:
        asyncio.run(debug_phone_extraction())
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
