#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫–∞–µ—Ç LeadRunner –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ lead_proc.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Django ORM –∏ Celery, –ø–æ—ç—Ç–æ–º—É —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import sys
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "leadmqr.settings")
import django
django.setup()

from playwright_bot.playwright_runner import LeadRunner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger("playwright_bot")

async def run_lead_runner_cli():
    logger.info("üöÄ Starting LeadRunner from CLI...")
    logger.info("üìù This will process leads from the lead_proc queue")
    logger.info("üîó Connecting to browser via WebSocket (ws://celery_lead_producer:9222)")
    logger.info("üõë Press Ctrl+C to stop")
    
    runner = LeadRunner()
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º LeadRunner
        await runner.start()
        logger.info("‚úÖ LeadRunner started successfully")
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
        logger.info("‚è≥ Waiting for lead processing tasks...")
        logger.info("üí° LeadRunner is ready to process leads from the lead_proc queue")
        logger.info("üîÑ Tasks will be processed automatically when they arrive")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        while True:
            await asyncio.sleep(1)
            
    except asyncio.CancelledError:
        logger.info("LeadRunner task was cancelled")
    except Exception as e:
        logger.error(f"LeadRunner error: {e}", exc_info=True)
        raise
    finally:
        logger.info("üîÑ Closing LeadRunner...")
        await runner.close()
        logger.info("‚úÖ LeadRunner closed")

def main():
    try:
        asyncio.run(run_lead_runner_cli())
    except KeyboardInterrupt:
        logger.warning("\nüõë Received shutdown signal, stopping...")
    except Exception as e:
        logger.error(f"‚ùå Unhandled error in main: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
