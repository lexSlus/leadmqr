#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–±–∞–≥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –ª–∏–¥–æ–≤ Thumbtack.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏–¥ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
"""

import os
import sys
import asyncio
import logging
from playwright.async_api import async_playwright

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from playwright_bot.thumbtack_bot import ThumbTackBot
from playwright_bot.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PhoneDebugger:
    def __init__(self, headless=False):
        self.headless = headless
        self.pw = None
        self.browser = None
        self.context = None
        self.page = None
        self.bot = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ–±–∞–≥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        
        self.pw = await async_playwright().start()
        self.browser = await self.pw.chromium.launch(
            headless=self.headless,
            args=['--no-sandbox', '--disable-dev-shm-usage']
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        profile_path = os.path.join(os.getcwd(), "pw_profiles", "auth_setup")
        self.context = await self.browser.new_context(
            user_data_dir=profile_path,
            viewport={'width': 1280, 'height': 720}
        )
        
        self.page = await self.context.new_page()
        self.bot = ThumbTackBot(self.page, Config())
        
        logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
    async def navigate_to_lead(self, lead_url=None):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–∞"""
        if lead_url:
            logger.info(f"üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª–∏–¥: {lead_url}")
            await self.page.goto(lead_url)
        else:
            logger.info("üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–æ–≤...")
            await self.page.goto("https://www.thumbtack.com/pro-leads")
            
        await self.page.wait_for_load_state('networkidle')
        logger.info(f"‚úÖ –¢–µ–∫—É—â–∏–π URL: {self.page.url}")
        
    async def debug_phone_extraction(self):
        """–î–µ–±–∞–∂–∏–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
        current_url = self.page.url
        logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–∏–¥–∞
        if "/messages/" not in current_url:
            logger.warning("‚ö†Ô∏è  –ù–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ª–∏–¥–∞!")
            logger.info("üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π –ª–∏–¥–∞ –≤—Ä—É—á–Ω—É—é")
            logger.info("üí° –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –ª–∏–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞")
            return None
            
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        try:
            phone = await self.bot._show_and_extract_in_current_thread()
            logger.info(f"üìû –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            return phone
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            return None
            
    async def debug_page_elements(self):
        """–î–µ–±–∞–∂–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        # –ò—â–µ–º tel: —Å—Å—ã–ª–∫–∏
        tel_links = await self.page.locator("a[href^='tel:']").count()
        logger.info(f"üìû –ù–∞–π–¥–µ–Ω–æ tel: —Å—Å—ã–ª–æ–∫: {tel_links}")
        
        if tel_links > 0:
            for i in range(tel_links):
                href = await self.page.locator("a[href^='tel:']").nth(i).get_attribute("href")
                text = await self.page.locator("a[href^='tel:']").nth(i).text_content()
                logger.info(f"  üìû Tel link {i+1}: href='{href}', text='{text}'")
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_elements = await self.page.locator(".IUE7kXgIsvED2G8vml4Wu").count()
        logger.info(f"üì± –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_elements}")
        
        if phone_elements > 0:
            for i in range(phone_elements):
                text = await self.page.locator(".IUE7kXgIsvED2G8vml4Wu").nth(i).text_content()
                logger.info(f"  üì± Phone element {i+1}: '{text}'")
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        all_links = await self.page.locator("a").count()
        logger.info(f"üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {all_links}")
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        phone_patterns = [
            r'\+\d{1,3}[\s\-]?\d{3,4}[\s\-]?\d{3,4}[\s\-]?\d{3,4}',
            r'\(\d{3}\)\s?\d{3}[\s\-]?\d{4}',
            r'\d{3}[\s\-]?\d{3}[\s\-]?\d{4}'
        ]
        
        for pattern in phone_patterns:
            elements = await self.page.locator(f"text=/{pattern}/").count()
            if elements > 0:
                logger.info(f"üìû –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º {pattern}: {elements}")
                for i in range(min(elements, 5)):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    text = await self.page.locator(f"text=/{pattern}/").nth(i).text_content()
                    logger.info(f"  üìû Match {i+1}: '{text}'")
                    
    async def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–±–∞–≥–∞"""
        logger.info("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–±–∞–≥–∞")
        logger.info("üí° –ö–æ–º–∞–Ω–¥—ã:")
        logger.info("  'phone' - –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–µ—Ñ–æ–Ω")
        logger.info("  'elements' - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã")
        logger.info("  'url' - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π URL")
        logger.info("  'goto <url>' - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ URL")
        logger.info("  'quit' - –≤—ã–π—Ç–∏")
        
        while True:
            try:
                command = input("\nüîß –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
                
                if command == 'quit':
                    break
                elif command == 'phone':
                    await self.debug_phone_extraction()
                elif command == 'elements':
                    await self.debug_page_elements()
                elif command == 'url':
                    logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {self.page.url}")
                elif command.startswith('goto '):
                    url = command[5:].strip()
                    if url:
                        await self.page.goto(url)
                        await self.page.wait_for_load_state('networkidle')
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞: {self.page.url}")
                    else:
                        logger.warning("‚ö†Ô∏è  –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞")
                else:
                    logger.warning("‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä"""
        if self.browser:
            await self.browser.close()
        if self.pw:
            await self.pw.stop()
        logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–î–µ–±–∞–≥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ –ª–∏–¥–æ–≤ Thumbtack')
    parser.add_argument('--url', help='URL –ª–∏–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--headless', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ')
    parser.add_argument('--interactive', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    debugger = PhoneDebugger(headless=args.headless)
    
    try:
        await debugger.start()
        await debugger.navigate_to_lead(args.url)
        
        if args.interactive:
            await debugger.interactive_mode()
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
            await debugger.debug_page_elements()
            await debugger.debug_phone_extraction()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await asyncio.sleep(5)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await debugger.close()

if __name__ == "__main__":
    asyncio.run(main())
